[
{
	"uri": "https://beingatpm.com/how/how_governance/",
	"title": "How to start a new project",
	"tags": [],
	"description": "",
	"content": " At the start of a project, there are plenty of unknowns. A TPM plays a crucial role to organize and set up the project structure right from the start. It’s very important to set up the execution structure right at the beginning as it becomes exponentially difficult to create new processes later on. At the initial phase of the project, a TPM would organize all the available information, get the teams together, provide tools and mechanisms for the teams to share information, and make progress. The goal of this document is to explain how does a TPM standardizes the common practices so that the rest of the team can focus on getting things done.\nThis standardization is also known as setting up a Governance or an Execution Structure for the team.\nGoals of Execution Structure  Project Organization: A structure in place for project tracking and status reporting. Centralized information: A central location (wiki or sites page) for assembling all the information. Bring clarity: A well-documented process and execution structure in place helps the team to follow along on progress and avoids confusion.  Execution structure Prerequisites You need few basic things in place, before you can start putting together an Execution Structure:\n Team leads: As you start putting the structure in place, make sure you have the buy-in from these leadership and they have allocated the PM, TL and TPM (that’s you) to the project. PM and TL will also help you to get other folks needed to execute on the project. Core team: Apart from leads, you will also need people representing the core groups to start scoping out the work required to deliver the complete project. Basic documentation: Generally, a PM would have put together an initial version of the PRD by this time. If the project requires new UIs or UX changes. then you might also need initial mockups to demonstrate the details of the project. Timelines: Pay special attention and document if there are any external events or time to market pressures driving the launch of this project. What are the most important factors influencing the launch timelines? Deadlines would influence many of the design and execution decisions that the team makes. Project Management triangle: Have a sense of constraints for a project: Resources, Time and Scope. Know where you have some flexibility and where are the risks for the project. This understanding will be crucial to driving key decisions for the project.  Elements of execution structure Creating a centralized wiki or sites page is highly recommended. As the TPM, you should take the responsibility of maintaining and keeping it up-to-date. Project’s Wiki pages would contain all the relevant information about the project. Below is the list of things you may need to put together an Execution structure and link them to the Project’s wiki page:\nProject Tracking and reporting  Milestones and timelines document: Well defined milestones and timelines help manage the progress and risks for the project. Create chase lists for each milestone. Project Workstreams: Break the project into several workstreams. This helps with managing the complexity and also creates independent swim-lanes for various leads to manage their work and timelines Project Tracker: Overall tracking for the project and also have the structure in place for each workstream and granular task tracking. The project tracker clearly shows the dependencies for various milestones and tasks and also highlights risks at any given time for the project. Status reporting: Publish a periodic newsletter that includes: Exec summary, Next Milestones, Highlights of what got done since the last update, Risks for next milestone and program overall, and Detailed status of each workstream.  There are plenty of tools available to do all of the above things, but the main thing is to have a consistent place where all of these documents are updated periodically. All stakeholders must be aware of where to go to find the latest information about the project.\nDocumentation structure  Create a centralized repository for all project-related documentation. Create sub-folders for each Workstream Create a program management folder for things like timelines, project trackers, project decisions, etc\u0026hellip; Key documents like timeline, progress report, current risks and plan of record must be highly visible  Email aliases Depending on the project , you may need to create various email aliases for information distribution. Too many granular lists can be hard to manage and too little could lead to information overload. Start with thinking about what kind of information would you like to share on regular basis. I’d recommend to start with at least 3 kinds of email aliases and adjust it later as the project progresses:\n \u0026lt;project_name\u0026gt;-leads@  Purpose: Leads discussion, escalations, sensitive discussions \u0026hellip; Members: Typically, this will consist of PM, TPM, TL, TLM, and UX lead   \u0026lt;project_name\u0026gt;-core-team@  Purpose: day-to-day project execution Members: Everyone working on the project   \u0026lt;project_name\u0026gt;-all@  Purpose: Broader announcements, weekly newsletter distribution Members: All stakeholders    Meetings Depending on the project, you may need to create various meetings to smoothly run the project. Here’s an example of the structure of the meetings you might want to create at the start of the project:\n Leads weekly sync Core team weekly sync Partner team(s) sync Per workstream weekly sync  For each meeting:  List down meeting owner, goals, and attendees Attach the meeting notes link to the calendar invite Make sure notes are shared out via email  More information about Meetings here\n"
},
{
	"uri": "https://beingatpm.com/what/",
	"title": "What does TPM do",
	"tags": [],
	"description": "",
	"content": "(Technical) Program Managers are an integral part of a software development team that requires cross-functional collaboration and tracking work across multiple teams. TPMs are good at managing complex dependencies and forming a critical path for project delivery. They manage the timelines and keep projects on track. This section describes the role of the program manager. Learn More   TPM Role  Learn what does a TPM do in a typical Software Engineering organization.       Role Comparison  Compare the role of a TPM with PM, PgM, PM and TLM.      "
},
{
	"uri": "https://beingatpm.com/how/",
	"title": "Being Successful",
	"tags": [],
	"description": "",
	"content": "Just like most of the things, being successful at this role is an acquired skill. It requires practice, experience and lot of patience. Program Manager deal with a lot of ambiguity, defining a path to success and helping the team walk that path is the core part of the role. In this section, we will go through few of the common things that all Program Managers deal with on a regular basis. How to start a new project   Team Processes   Meetings   Bug Tracking    "
},
{
	"uri": "https://beingatpm.com/about-me/",
	"title": "About Me",
	"tags": [],
	"description": "",
	"content": "My name is Rohit. This site is about my learnings on being a Technical Program Manager over the past years. I switched my career to TPM back in 2009 and I am still fascinated by the challenges this role brings. It’s a constantly evolving role that requires a lot of perseverance and consistent effort to be successful. The daily challenges of working in an ambiguous environment make it interesting and keep me going on.\nBeing successful in this role is an acquired skill that takes practice, experimentation, and patience. There’s no straight path, no defined measures of success, establishing yourself as a successful TPM can sometimes be hard. Working with people, being an essential part of the team, shipping products that improve lives, making change happen are all the elements of making it a rewarding experience.\nIn this website, I have put together my set of practices and experiences that have helped me being successful at my job. There are no rules, but just a set of my learnings. I hope to help others learn from my experiences.\nI currently lead a team of TPMs at Google. I have worked on diverse products at Google: Google Assistant, Google Nest/Home, Play Store, and Payments. More details of my projects and career trajectory at my linkedin. I currently live in the Bay area, California.\nI enjoy chatting about career challenges related to the area of program management and helping people out. Feel free to drop me an email/LinkedIn message if there’s any way I can help. I can be reached at gandhi.rohit at gmail dot com.\n"
},
{
	"uri": "https://beingatpm.com/how/team_process/",
	"title": "Team Processes",
	"tags": [],
	"description": "",
	"content": " As a TPM, sometimes you are expected to run various team-wide processes that are not specific to one project, but rather impacts entire Engineering and Product teams. These processes define the team culture, enforces good practices, and helps the team make progress in a meaningful way. TPMs are generally well situated in the org to drive these processes as it requires collaboration across various functions. n this section, we will review a few of such processes, meetings associated with them, and the role of a TPM.\nProcesses In any product focussed organization, a TPM can set up the following processes to greatly enhance collaboration and productivity of the group. Not only do these processes help with bringing clarity, but also promote discipline and a sense of progress for the product development life-cycle.\nProduct reviews Product review covers a broad set of topics related to the products that the team is working on. As a TPM, you can work with your PM to define what kind of topics should be covered in product reviews, some of the common topics for product reviews are:\n Product decision making Product roadmap Product development updates Risk mitigation options  TPMs would define a regular cadence of product reviews for their projects e.g it might be useful to provide monthly status updates to execs. Similarly, TPMs would also be aware if things are not going in the right direction and then prepare to bring up an escalation meeting as part of the product review forum. Another common example is where PMs or TPMs setting up a process to bring Product Requirements Review (sometime also known as PRD reviews) to this forum at the beginning of each project.\nEngineering reviews Technical design reviews and decision making are the two most common topics for such a meeting. As a TPM, you can work with your Tech lead or Engineering Manager to define what all topics must go through this review. It’s a good practice for Eng to document the technical design of each of the projects and take it through such a review. This process helps with fostering a collaborative culture with Eng teams and also establishes a source of truth for what’s being built and helps various cross-functional teams review such designs.\nBusiness reviews The business review would cover product metrics for launched products, market analysis, or business requirements. The metrics and business discussions are not necessarily just related to DAU/MAU, # of users, or financials but many times also related to product features and impact to the market. As a TPM, you can work with PMs, Business Analysts to set up a regular cadence for such a review. TPMs also keep an eye on the important metrics for their projects, help create, publish and, monitor relevant dashboards.\nProduct Launch reviews Any code that ships to production should have a formal review process associated with it. As part of the launch review, the team would go through all the changes to user experience, testing results, beta user feedback, Eng metrics (crash reports, latency, qps, etc…). There should be a designated decision-maker in the room to review all the results and approve (or not) the launch. As a TPM, you would work with PM and Eng leads to set up standard templates for launch reviews and also help with queuing up these meetings.\nPostmortem reviews “Learn from the mistakes of others. You can’t live long enough to make them all yourself.” - Eleanor Roosevelt When things go wrong, and they always do, have processes in place to learn and recover from them. In this review, the team would cover things like:\n What went wrong Steps that led to the failure What was the impact How to prevent in future A detailed list of changes to improve the system failures  As a TPM, you would set up the standard template to drive this process. Keep an eye on which failures need to go through a postmortem review and queue it up. Maintain an archive of all previous postmortems at an easily accessible place.\nTech talks Tech talks is an informal knowledge-sharing forum for Engineers. Engineers can sign-up to discuss their recent projects and explain what they did. They can talk about any interesting recent challenge, something new they discovered, or just go into details of a piece of technology they used. It doesn’t necessarily have to be about projects or technologies currently in use by the team. As a TPM, you can work with Engineers and encourage such team-wide information sharing opportunities.\nAll Hands As the name suggests, this is a meeting for all team members. Typically, this meeting would happen once a quarter and would cover main updates for teams or projects, celebrate recent wins, welcome new team members, reflect upon all the things going on in your org. It’s generally driven by a few of the senior leads in the team. TPMs would generally contribute towards building the content for this meeting or sometimes even present the project updates to the team.\nRole of a TPM The TPM team is responsible for running these core processes for an organization. As a TPM, you would define these processes and also set up the meetings to drive them. You might want to set up a sign-up spreadsheet for these meetings to allow for the team to queue up items for a future dates. These standard set of practices also help the TPMs gain visibility into team dynamics, provides a good pulse of team progress and helps encourage a collaborative culture.\n"
},
{
	"uri": "https://beingatpm.com/about-website/",
	"title": "About Website",
	"tags": [],
	"description": "",
	"content": "Content All the content, views, ideas, and opinions expressed in this website are solely my own and do not express the views or opinions of my employer.\nWebsite This website was built using Hugo, the static website generator tool. Hugo is easy to use and it was quite fun to put everything together. The main challenge with Hugo was choosing and customizing the theme. The way Hugo works is that you have to select the theme first and then try to fit in your content in there. After a few tries, I finally settled on Ace documentation theme. Ace documentation supports Bootstrap 4 which makes it fully responsive out of the box and allows for quick and easy customization e.g font awesome icons is one of my favorite features.\nWebsite hosting This website is hosted using Hugo on Netlify. Netlify offers a direct integration with Github and a continuous deployment set up.\nEditor All of my projects start with paper and pencil. This helps me organize my thoughts and design a high-level plan and structure. All the content was originally written in Google docs. I used Atom editor for coding and transferring the content from docs to Markdown format.\nIllustrations Most of the illustrations are created using Figma. Illustrations attributions:\n IRA Design Vector Character Illustrations Hitu Illustration Components Product Planner  "
},
{
	"uri": "https://beingatpm.com/what/tpm_role/",
	"title": "TPM Role",
	"tags": [],
	"description": "",
	"content": " What does a TPM do? TPM’s role can be very diverse, it can vary in different organizations. Many times the role changes depending on the phase of the project. This provides a lot of freedom to TPMs to do their job, but it also makes it harder to define success. Navigating the ambiguity of the role can sometimes be challenging. In this section, we will cover a few examples of things and activities that a TPM does in their day-to-day operations. This isn’t a comprehensive list, neither do TPMs do everything listed here. We will cover what does it take to be successful in the job in a later section.\nThis section is divided into two parts: TPM Role - Basics covers the core set of responsibilities a TPM might assume on any project. TPM Role - Specialized covers more specific topics related to org, project phase, or specialized skill set.\nTPM Role - Basics Generally, the PM defines what needs to happen and TPM is responsible for getting it done. PM vs TPM role details here. TPMs are responsible for the execution of the projects and are expected to work through various aspects of product delivery. Some of the things a TPM does are the following:\n  Get the right team in place: During the initial phases of a project a TPM works with PM to figure out who all are needed to successfully execute the project. For any typical software project this team structure would consist of: Software Engineers (Backend and Frontend), Infrastucture Eng, QA, UI/UX designers, Privacy, Security, Legal and Marketing folks. Obviously, each project is different and may require few other roles. At the beginning of the project, a TPM (or PM) would reach out to all contributors or stakeholder to setup the right team structure of the project.\n  Project Scoping: Irrespective of the Project tracking tools a team uses, the TPM must spend some time at the beginning of the project to scope out the work. This is not an exercise to determine the launch date, but rather to figure out things like:\n what are the big blocks of work what\u0026rsquo;s the complexity of the work involved what are the dependencies what\u0026rsquo;s the critical path to finish timeline what\u0026rsquo;s the time estimate to get the work done  \nThis exercise will help the team to figure out what areas of the project to spend more time on and also to assess the magnitude of the project. It gives an initial estimate on the feasibility of delivering the project by a certain time-frame.\n  Setup Project structure: Sometimes also referred to as Governance or Execution structure, as a TPM you need to establish a standard set of practices to run the project. List of artifacts that help setting up such a structure:\n Project workstreams Project and workstream leads Trackers:  Milestones Timelines Tasks Features implementation progress Bugs   Central Project site or wiki for one place to link all project related information Setup distribution list (or email groups)  leads group (few people) working group (all people working on the project) stakeholders group (all people interested in receiving project related communication)   Communication format  Periodic newsletters Meeting notes Exec presentations   Testing results progress and analysis Gathering user feedback  \nYou can find more details about execution structure here.\n  Drive the project: The project structure helps you drive the project forward. Program Managers need to be disciplined enough to run the processes that have been established and agreed upon with the team. The team depends on program managers to bring clarity on the status of the project and highlight if things are going sideways. Driving a project means doing activities like: tracking the tasks, milestones and timelines, managing dependencies, unblocking if things are not moving forward, communicating the status, setting the required meetings and reviews.\n  Manage testing and beta usage: As features get coded, help the team get them tested via manual QA or automated test infrastructure. Many organizations use the concept of beta testing the product with a small group of real users. Beta testing helps uncover real-life scenarios that might have been missed during product development. Program Managers may help the team run this process by: 1. Figure out the cohort of such users. 2. Share the product with them - this may mean to run a specialized release process for these limited set of users 3.Help users discover product features and usage 4. Collect feedback 4. Analyse feedback - qualitative (e.g CSAT scores, generic feedback on what worked and not) or quantitative (bugs discovered during product usage) 5. Follow-up on feedback/bugs with Product and Eng teams.\n  Manage releases and launch: Setup the process for getting code to production. TPMs are closely involved and sometimes even drive the entire process of periodic binary releases. Product launch is a lot more involved process: teams start preparing for this activity quite early in the product development life cycle. \n  Conclude the projects with postmortems: It’s always a good practice to end the project with a postmortem or a retrospective. Define a common template that each sub-team can use to fill up the details, this would typically be divided into 2 primary categories: What went well? And, What can be improved? You might also want to get feedback on any new specific things you introduced related to the program or processes.\n  TPM Role - Specialized As the programs grow bigger, TPMs can be hired for specialized roles. If the organization has resources, a good way to scale is to build expertise for various functions. This also helps with the establishment and improvement of standard processes. TPMs in these roles are not only responsible for launch of specific programs, but their success is dependent on how well the process is run in support of the program, their core responsibility is to establish a process and constantly work on improving it. Here are a few examples of specialized roles and a brief description of each of them.\n Release management: Binary release is an important function for any software organization. It is essential that every release maintains (or improves) the quality of shipping software. At a very high level, a TPM would perform the following activities as part of the Release management process:  Create a release schedule, publish a release calendar. Publish a step-by-step release process Host release planning meetings Define mitigation strategies when things are not on-track e.g blocking bugs, non-deterministic feature quality, rel-eng issues etc… QA qualification of binary Push the binary through various internal stages before hitting prod Monitor prod metrics after pushing the binary to prod    Depending on the product and binary hosting environment, many of the above steps are automated and might not even require a TPM involvement. This is more common for teams that ship server binaries very frequently (~daily) to production.\n  QA management: The job of Quality Assurance is to test and ensure good quality of the shipping software. A TPM in this function manages the QA lifecycle for qualifying the binary or feature before shipping to production. This would require a good understanding of automated vs manual test cases, prioritizing the test cases and ensuring teams have the right setup for testing. Once testing is complete, a TPM would analyze the results and assess the severity of the issues found.\n  Beta usage management: Many organizations use the concept of beta testing the product with a small group of real users. Beta testing helps uncover real-life scenarios that might have been missed during product development or structured testing. A TPM in this function helps the team run the beta usage process by: 1. Figure out the cohort of such users. 2. Share the product with them - this may mean to run a specialized release process for these limited set of users 3.Help users discover product features and usage 4. Collect feedback 4. Analyse feedback - qualitative (e.g CSAT scores, generic feedback on what worked and not) or quantitative (bugs discovered during product usage) 5. Follow-up on feedback/bugs with Product and Eng teams.\n  Launch TPM: For large programs, many organizations designate a formal launch TPM role with the objective of having a person coordinating all the things required to launch the product. This person would work closely with many groups including Engineering, Product, QA, SRE, Core Infrastructure, Privacy, Security, Marketing etc… A launch TPM would coordinate the readiness of launching the product across various functions in the organization.\n  Feature TPM: A feature TPM gains subject matter expertise on specific features and coordinates the work required to ship them to production. Although it’s not a common practice to hire feature specific TPM, there are two scenarios where this is helpful: 1. When the feature is complex and requires coordinating a lot of dependencies across various teams 2. This is a good way for junior TPMs to learn the skills, having a smaller scope of work helps with the learning process.\n  Infrastructure TPM partners with Engineering teams to coordinate the work related to compute platforms and services. In most of the modern organizations, this role is responsible for things like: managing cloud infrastructure, networking or developing backend infrastructure and tools that the rest of the Engineering organization depends on.\n  Cloud Capacity management TPM role is closely related to Infra TPM, an even more specialized role to manage cloud infrastructure capacity. It involves working with Engineering teams and figuring out the compute, networking and data storage requirements for various features\n  "
},
{
	"uri": "https://beingatpm.com/what/roles/",
	"title": "PM, PgM, TPM vs TL",
	"tags": [],
	"description": "",
	"content": "From Michael Lopp\u0026rsquo;s randsinrepose.com blog:\nA program manager is an uber-mutated combination of both that usually shows up to handle multiple interrelated projects like, say, an operating system. Different companies use the names differently, but for this article, project = ship the product, product = ship the right product, and program = ship many interrelated products, usually at the same time     PM: Product Manager Product Manager is responsible for defining what needs to happen and why. For any Software development project, a PM would work with the team to figure out what\u0026rsquo;s the right product to develop. PM considers various factors to get to the definition of the product:\n Customer value: Does the product add value to its users? What\u0026rsquo;s the change this product brings in customer\u0026rsquo;s usage of the product? Does it make user\u0026rsquo;s life easier / better / delightful? Marketing fit: Is there a real need for such a product? Time to market: Are there any external factors controlling the launch timeline? Any competing products, do we want to gain first-to-market advantage? Time to develop: How long does it take to develop the product? MVP: What\u0026rsquo;s the minimum viable product that can be shipped and serves it\u0026rsquo;s purpose? Defining success: What\u0026rsquo;s the purpose of the product? What metrics would we measure the success against? Define success based on the product maturity e.g customer segment and market penetration for new products or revenue for matured products. Product features: Break down the product into a well-defined set of features. Describe the product usage workflow from user\u0026rsquo;s perspective.  Product definition is generally written in the form of a \u0026lsquo;Product Requirements Doc\u0026rsquo; (PRD). This definition is expected to evolve during product development lifecycle as new information comes in.\nA PM works with lot of different cross-functional groups:\n A PM would work very closely with Program Manager during execution phases of the project to align on priorities. A PM would work very closely with Tech Lead to ensure Engineering is building the product as the PM defined. A PM would work very closely with UX to get the right designs. A PM would work very closely with marketing to align on all external factors influencing product design and launch. A PM would also work closely with other cross-functional groups such as Legal, Privacy and Security ensure product is doing the right thing.  PgM and TPM PgM: Program Manager TPM: Technical Program Manager\nFor the most part of this site, I have used PgM and TPM interchangeably. The main responsibilities for both of these roles are still the same. However, TPMs are more involved on the technical aspects of their projects. In this context, technical implies software development. Apart from core Program Management, here are few examples of what a TPM on a project could be doing:\n Based on the PRD a TPM could write the technical specifications for a project. This would help Engineers understand the technical aspects for the requirements. A TPM generally understands the software architecture and influences technical choices. This influence generally comes from past experiences or the ability to understand various technical paths. A TPM is expected to demonstrate technical judgement during various phases of the project e.g help with code path optimizations, user latency optimizations etc\u0026hellip; A TPM could also contribute to software development / code. Generally, this might not be a good idea as it takes time away from core job responsibilities and it us unlikely that a person is good at coding and managing the project at the same time. Few more specific activities that a TPM could be doing as technical contribution to the projects:  QA/ Test automation + API validation Release management Platform / Infra management e.g managing AWS/Cloud resources. Managing App store releases via App Developer Console.    TL: Tech Lead Tech lead\u0026rsquo;s main responsibility is to drive all Technical aspects of the project. This is usually seen in the form of architecture or design docs, figuring out an optimal path to deliver code including technical dependencies, unblocking Software Engineers on technical decisions etc\u0026hellip;\nTLM: Tech Lead Manager TLM usually has few Software Engineers reporting into them and have the authority to allocate people to projects. They are responsible for career growth and productivity of individuals. They have a good sense of mapping people to project.\nTPM Relationships Most of the successful projects I have been on have a very strong trio relationship: PM, TPM and TL. All three roles work very closely with each other. Although they have very distinct roles, but many a times they are able to represent each other in various meetings. This kind of strong bonding and trust relationship takes time and requires deliberate, conscious effort to develop. As a TPM, nurturing such a relationship with your PM and TL is part of the job.\n"
},
{
	"uri": "https://beingatpm.com/how/meetings/",
	"title": "Meetings",
	"tags": [],
	"description": "",
	"content": "Image Attribution: Business vector created by pch.vector - www.freepik.com\n In a typical Software organization, a TPM collaborates with a team(s) of software engineers, product managers, tech leads, engineering managers, and various other folks from different functional groups. All these cross-functional groups need to be working together to deliver a common objective. Meetings are one of the most efficient tools for TPM to bring people together and make progress. However, people dread meetings, sometimes meetings take time away from productive work time.\nEffective meetings need to be planned and designed. While executing on projects, TPMs are expected to run meetings effectively. Atlassian has a really good definition of effective meeting:\nAn effective meeting brings a thoughtfully selected group of people together for a specific purpose, provides a forum for open discussion, and delivers a tangible result: a decision, a plan, a list of great ideas to pursue, a shared understanding of the work ahead.\nDesigning meetings cadence A well-structured meeting cadence can help the teams tremendously. For a project in an execution phase, I\u0026rsquo;d recommend setting up four different kinds of meetings:\n Leads sync: This is a meeting for project leads PM, TL, and TPM. The main agenda is to discuss day-to-day activities and progress on the project. This is where you would also discuss risks, mitigation, upcoming milestones, exec presentations, prepare for weekly updates, etc… The frequency of this meeting generally depends on the phase of the project. In my experience, many times, this meeting evolves to a daily-standup as the project gets closer to launch. During crunch time, you would also add some of the key players to this daily standup. Core team weekly sync: This is the meeting to share information with a broader audience. Generally, you’d invite everyone on the project including partner teams to this meeting. As a TPM, you’d prepare the agenda consisting of things like progress update, upcoming milestones, any recent changes to the plan of record, any new decisions taken related to the project, pass-downs, or feedback from execs, current risks, and potential mitigation. You’d also invite workstreams/area leads to sharing any updates. Open up a general Q \u0026amp; A for the teams. Generally, once a week cadence is good, but it may also depend on the size of the meeting and phase of the project. Partner team(s) sync: For the teams, you work closely with, it’s a good practice to have regular sync. The main agenda for this meeting is to align on things: priorities, deliverables and timelines, product and technical designs, risk mitigation. Many times these meetings become cross-functional working sessions. Per workstream weekly sync: Each of the workstreams/areas of the project should run their own weekly sync’s. As a TPM, your participation in those meetings would depend on your bandwidth and how closely are you working on those areas. At the minimum, make sure regular syncs are happening, and meeting notes are shared with the team.  TPMs role in driving effective Meetings TPMs drive meetings. Not all of them, but for any project they would own the majority of the meetings. TPMs would:\n Set and share meeting agendas before the meeting Drive the meeting Take notes Share notes Follow-up on actions  A note about taking notes Meeting notes is often overlooked, but it’s one of the most efficient tools for TPMs. Regular, good notes are the source of truth on how the project is progressing. It would highlight what got done recently, what’s at risk, and what’s blocked.\nMeeting notes describes and clarifies what decisions were made. With so many people in the room, many times people hear things differently. Far too many times we have heard: \u0026ldquo;I thought we decided \u0026hellip;\u0026quot;. Meeting notes establishes a common understanding. And, if the notes don’t happen to be accurate, that’s also fine because then it initiates the discussion and hopefully gets people to an agreement.\nGood meeting notes would have the following sections:\n Date of meeting Attendees Summary of meeting List of Action Items. Each action item must specify what needs to be done, by whom, and by when. Detailed discussion notes  Meeting notes is a good way to assign action items to people and follow-up on them. Depending on the discussions, as a TPM, you may create a ticket to follow-up on action items or add a note to a decision log.\nMeeting notes are also a good source of material for your weekly updates to the team and execs.\n"
},
{
	"uri": "https://beingatpm.com/how/bugs_tracking/",
	"title": "Bug Tracking",
	"tags": [],
	"description": "",
	"content": " Bugs (defects or features) Tracking In most of the organization, Software Engineering teams are organized into logical groups e.g backend infrastructure, feature backend, frontend infra and UIs, feature teams, etc…Whereas, most of the projects would require work across many Engineering teams. As a TPM, your role is to create a structure and organize the work across teams to hit project milestones as per timelines defined by you. Apart from your Project trackers (Spreadsheets, MS Project, Asana, etc…), a bug tracking tool is an essential element of project tracking. The thing I like most about the bug tracking tool is it is by far the closest source of truth for visible progress. Typically, bugs are assigned to Engineers and they are expected to update the progress, attach Code changes, or define blockers/dependencies within the tool. Progress reporting is generally built on top of such bug tracking tools.\nI will stay away from tools usage itself. Jira, bugzilla, Tracs etc\u0026hellip;are just means to track progress. As a TPM, you still need to define and design the usage of these tools. There are two important things to keep in mind as you design the workflow for a bug tracking tool:\n People and interactions Progress tracking and reporting  People and interactions Stakeholders use bug tracking tools in different ways. Engineering managers are interested in things like Next priorities, their team’s current workload, the velocity of the team, what needs to get done by when. PMs are interested in knowing what all is remaining to complete the feature, when will it get done, and if anything is blocked. Release managers want to know what all is checked-into the binary, is the binary ready to be released.\nIn a complex organization, it may take several layers of triage before a bug gets to the right Engineer. It’s important to have a defined consistent process for how does the bug flow through various levels of triage and eng teams. Optimize of speed and accuracy - getting these things wrong has an associate cost. Sometimes, it’s best to create a clear runway for high priority/production bugs, whereas it might be ok for normal priority bugs to follow a regular workflow.\nAs Engineers start working on bugs, many times they need to assign it to a different team. As a TPM, ensure that people have clarity on rules of engagement for such re-assignments e.g priority definitions and Need by dates are mentioned in the tools. You will need separate mechanisms to align on deliverables, priorities, and timelines.\nProgress tracking and reporting As you design the workflow, think about things important for you to know and report on. Few key reports to keep in mind:\n Progress towards next milestone: A chaselist of what\u0026rsquo;s remaining, when is it expected to get done and who\u0026rsquo;s working on it. Progress towards next milestone: A chase list of what’s remaining, when is it expected to get done, and who’s working on it. What are the open items for any project at a given point What’s being actively worked upon and what’s the backlog Workload per eng team Velocity of each eng team  "
},
{
	"uri": "https://beingatpm.com/",
	"title": "On being a Technical Program Manager",
	"tags": [],
	"description": "",
	"content": "Program managers make things happen, they get the projects done. They create scalable processes that help teams make tangible progress towards project goals. This site discusses the role of a (Technical) Program Manager, explains what they do and how. This site focuses on the role of a Technical Program Manager in a fast-paced software development environment. Program Managers I have used the terms Project Manager, Program Manager, and Technical Program Manager (TPM) interchangeably as I believe the majority of the role is still the same. Subtle differences in these roles are explained here. At a high level, program managers:\n Get things done Bring order to chaos Bring clarity to situations Ensure team is always making progress  Program managers wear different hats depending on the situation, the role has so much to offer. People generally get into this role to gain experience in the technical and business side of things. This role is an integral part of any team. I think of this role as the Hub in the Hub and spoke model. Good program managers always know the pulse of their projects, they become the central source of information and are responsible for pacing the projects.\nLearn More   What does TPMs do?  This section describes the role of a TPM and how is it different from other leads in the team       Being Successful  This section describes how to be successful at your job as TPM      "
},
{
	"uri": "https://beingatpm.com/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://beingatpm.com/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]
